//~ todo: UTF-8
var handyClicksPrefServ = {
	__proto__: handyClicksObservers,
	ut: handyClicksUtils, // shortcut
	warnComment: "// Preferences of Handy Clicks extension\n// Do not edit this file.\n\n",
	defaultPrefs: "var handyClicksPrefs = {};\nvar handyClicksCustomTypes = {};",
	prefsFileName: "handyclicks_prefs.js",
	okShortcut: /^button=[0-2],ctrl=(?:true|false),shift=(?:true|false),alt=(?:true|false),meta=(?:true|false)$/,
	_doNotReload: false,
	get profileDir() {
		var dirServ = Components.classes["@mozilla.org/file/directory_service;1"]
			.getService(Components.interfaces.nsIProperties);
		return dirServ.get("ProfD", Components.interfaces.nsILocalFile);
	},
	get prefsFile() {
		var pFile = this.profileDir;
		pFile.append(this.prefsFileName);
		return pFile;
	},
	loadSettings: function() {
		var prefsFile = this.prefsFile;
		if(!prefsFile.exists())
			this.saveSettings(this.warnComment + this.defaultPrefs, prefsFile);

		var ioServ = Components.classes["@mozilla.org/network/io-service;1"]
			.getService(Components.interfaces.nsIIOService);
		var jsLoader = Components.classes["@mozilla.org/moz/jssubscript-loader;1"]
			.getService(Components.interfaces.mozIJSSubScriptLoader);

		try {
			jsLoader.loadSubScript(ioServ.newFileURI(prefsFile).spec);
		}
		catch(e) {
			this.ut._err("[Handy Clicks]: Error in Handy Clicks prefs: bad js file");
			throw e;
		}
		if(typeof window.handyClicksPrefs != "object")
			window.handyClicksPrefs = {};
		if(typeof window.handyClicksCustomTypes != "object")
			window.handyClicksCustomTypes = {};
		else
			this.convertCystomTypes();
	},
	convertCystomTypes: function() {
		var cts = handyClicksCustomTypes;
		for(var type in cts) {
			if(!cts.hasOwnProperty(type))
				continue;
			try {
				cts[type]._define = this.compileStr(cts[type].define);
				cts[type]._contextMenu = this.compileStr(cts[type].contextMenu);
			}
			catch(e) {
				this.ut._err("[Handy Clicks]: Error in custom type " + type + "\n" + e);
			}
		}
	},
	compileStr: function(str) {
		return !str ? null : new Function(decodeURIComponent(str));
	},
	saveSettingsObjects: function(reloadAll) {
 		var res = this.warnComment + "var handyClicksPrefs = {\n";
		var shortcutObj, itemTypeObj, propVal;
		for(var shortcut in handyClicksPrefs) {
			if(!handyClicksPrefs.hasOwnProperty(shortcut) || !this.isOkShortcut(shortcut))
				continue;
			shortcutObj = handyClicksPrefs[shortcut];
			res += '\t"' + shortcut + '": {\n';
			for(var itemType in shortcutObj) {
				if(!shortcutObj.hasOwnProperty(itemType))
					continue;
				itemTypeObj = shortcutObj[itemType];
				res += "\t\t" + this.fixPropName(itemType) + ": {\n";
				for(var propName in itemTypeObj) {
					if(!itemTypeObj.hasOwnProperty(propName))
						continue;
					propVal = itemTypeObj[propName];
					res += "\t\t\t" + this.fixPropName(propName) + ": " + this.objToSource(propVal) + ",\n";
				}
				res = this.delLastComma(res) + "\t\t},\n";
			}
			res = this.delLastComma(res) + "\t},\n";
		}
		res = this.delLastComma(res) + "};\n";

		res += "var handyClicksCustomTypes = {\n";
		for(var itemType in handyClicksCustomTypes) {
			if(!handyClicksCustomTypes.hasOwnProperty(itemType) || itemType.indexOf("custom_") != 0)
				continue;
			itemTypeObj = handyClicksCustomTypes[itemType];
			res += "\t" + this.fixPropName(itemType) + ": {\n";
			for(var propName in itemTypeObj) {
				if(!itemTypeObj.hasOwnProperty(propName) || propName.indexOf("_") == 0)
					continue;
				propVal = itemTypeObj[propName];
				res += "\t\t" + propName + ": " + this.objToSource(propVal) + ",\n";
			}
			res = this.delLastComma(res) + "\t},\n";
		}
		res = this.delLastComma(res) + "};";

		this.saveSettings(res);
		this.reloadSettings(reloadAll);
	},
	objToSource: function(obj) {
		return uneval(obj).replace(/^\(|\)$/g, "");
	},
	fixPropName: function(pName) {
		return /^\d|\W/.test(pName) ? '"' + pName + '"' : pName;
	},
	delLastComma: function(str) {
		return str.replace(/,\n$/, "\n");
	},
	get wm() {
		if(!this._wm)
			this._wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
				.getService(Components.interfaces.nsIWindowMediator);
		return this._wm;
	},
	reloadSettingsInAllWindows: function(winType) {
		var wm = this.wm;
		var ws = wm.getEnumerator(winType);
		while(ws.hasMoreElements()) {
			var mw = ws.getNext();
			if("handyClicksPrefServ" in mw && !mw.handyClicksPrefServ._doNotReload) {
				mw.handyClicksPrefServ.loadSettings();
				mw.handyClicksPrefServ.notifyObservers();
			}
		}
	},
	reloadSettings: function(reloadAll) {
		this._doNotReload = reloadAll ? false : true;
		["navigator:browser", "handyclicks:settings", "handyclicks:editor"]
			.forEach(this.reloadSettingsInAllWindows, this);
		this._doNotReload = false;
	},
	saveSettings: function(str, prefsFile) {
		prefsFile = prefsFile || this.prefsFile;
		if(prefsFile.exists()) {
			prefsFile.moveTo(this.profileDir, this.prefsFileName + ".bak");
			prefsFile = this.prefsFile;
		}
		this.writeToFile(str, prefsFile);
	},
	writeToFile: function(str, file) {
		var stream = Components.classes["@mozilla.org/network/file-output-stream;1"]
			.createInstance(Components.interfaces.nsIFileOutputStream);
		stream.init(file, 0x02 | 0x08 | 0x20, 0644, 0);
		stream.write(str, str.length);
		stream.close();
	},
	isOkShortcut: function(s) {
		return this.okShortcut.test(s);
	},
	isOkFuncObj: function(fObj) {
		return typeof fObj == "object"
			&& typeof fObj.enabled == "boolean"
			&& typeof fObj.eventType == "string"
			&& typeof fObj.action == "string";
	}
};
handyClicksPrefServ.loadSettings();