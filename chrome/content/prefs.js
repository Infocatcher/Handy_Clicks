var handyClicksPrefSvc = {
	__proto__: handyClicksObservers, // Add observers interface
	ut: handyClicksUtils, // shortcut
	warnComment: "// Preferences of Handy Clicks extension\n// Do not edit this file.\n\n",
	defaultPrefs: "var handyClicksPrefs = {};\nvar handyClicksCustomTypes = {};",
	prefsDirName: "handyclicks",
	prefsFileName: "handyclicks_prefs",
	okShortcut: /^button=[0-2],ctrl=(?:true|false),shift=(?:true|false),alt=(?:true|false),meta=(?:true|false)$/,
	_doNotReload: false,
	_isReloader: false,
	_restoringCounter: 0,
	get profileDir() {
		var dirSvc = Components.classes["@mozilla.org/file/directory_service;1"]
			.getService(Components.interfaces.nsIProperties);
		return dirSvc.get("ProfD", Components.interfaces.nsILocalFile);
	},
	get prefsDir() {
		if(!this._prefsDir) {
			var dir = this.profileDir;
			dir.append(this.prefsDirName);
			if(!dir.exists()) {
				try { dir.create(1, 0755); }
				catch(e) { this.ut._err("[Handy Clicks]: Cannt create directory\n" + e); }
			}
			this._prefsDir = dir;
		}
		return this._prefsDir.clone();
	},
	getFile: function(fName) {
		var file = this.prefsDir;
		file.append(fName);
		return file;
	},
	get prefsFile() {
		if(!this._prefsFile)
			return this._prefsFile = this.getFile(this.prefsFileName + ".js");
		return this._prefsFile.clone();
	},
	loadSettings: function() {
		var pFile = this.prefsFile;
		if(!pFile.exists())
			this.saveSettings(this.warnComment + this.defaultPrefs);
		var ioSvc = Components.classes["@mozilla.org/network/io-service;1"]
			.getService(Components.interfaces.nsIIOService);
		var jsLoader = Components.classes["@mozilla.org/moz/jssubscript-loader;1"]
			.getService(Components.interfaces.mozIJSSubScriptLoader);
		try {
			jsLoader.loadSubScript(ioSvc.newFileURI(pFile).spec);
		}
		catch(e) {
			this.ut._err("[Handy Clicks]: Error in Handy Clicks prefs: bad js file\n" + e);
			this.loadSettingsBackup();
			return;
		}
		if(typeof window.handyClicksPrefs != "object" || typeof window.handyClicksCustomTypes != "object") {
			this.loadSettingsBackup();
			return;
		}
		//if("handyClicks" in window)
		if(window.location.href == "chrome://browser/content/browser.xul")
			this.convertCystomTypes();
		this._restoringCounter = 0;
	},
	loadSettingsBackup: function() {
		var pFile = this.prefsFile;
		this._cPath = this.moveFiles(pFile, "-corrupted-", 4) || this._cPath;
		if(this._restoringCounter <= 4) {
			var bName = this.prefsFileName + "-backup-" + this._restoringCounter + ".js";
			var bFile = this.getFile(bName);
			var hasBak = bFile.exists();
			if(!hasBak) {
				this._restoringCounter++;
				this.loadSettingsBackup();
				return;
			}
			else {
				bFile.copyTo(this.prefsDir, this.prefsFileName + ".js");
				this.moveFiles(bFile, "-restored-", 4);
			}
			this.ut.alertEx(
				this.ut.getLocalised("errorTitle"),
				this.ut.getLocalised("badJSFile").replace("%f", this._cPath)
					+ (hasBak ? this.ut.getLocalised("restoredFromBackup").replace("%b", bFile.path) : "")
			);
			this._restoringCounter++;
		}
		this.loadSettings();
	},
	convertCystomTypes: function() {
		var cts = handyClicksCustomTypes, ct;
		for(var type in cts) {
			if(!cts.hasOwnProperty(type))
				continue;
			ct = cts[type];
			if(typeof ct != "object" || ct.disabled)
				continue;
			try {
				ct._define = this.compileStr(cts[type].define);
				ct._contextMenu = this.compileStr(cts[type].contextMenu);
			}
			catch(e) {
				this.ut.notify(
					this.ut.getLocalised("errorTitle"),
					this.ut.getLocalised("customTypeCompileError")
						.replace("%l", decodeURIComponent(ct.label || ""))
						.replace("%id", type)
						.replace("%e", e)
					+ this.ut.getLocalised("openConsole"),
					toErrorConsole
				);
				var msg = "[Handy Clicks]: Error in custom type " + type + "\n" + e;
				this.ut._err(msg);
			}
		}
	},
	compileStr: function(str) {
		return !str ? null : new Function(decodeURIComponent(str));
	},
	saveSettingsObjects: function(reloadAll) {
 		var res = this.warnComment + "var handyClicksPrefs = {\n";
		var shortcutObj, itemTypeObj, propVal;
		this.sortObj(handyClicksPrefs);
		for(var shortcut in handyClicksPrefs) {
			if(!handyClicksPrefs.hasOwnProperty(shortcut) || !this.isOkShortcut(shortcut))
				continue;
			shortcutObj = handyClicksPrefs[shortcut];
			if(!this.sortObj(shortcutObj))
				continue;
			res += '\t"' + shortcut + '": {\n';
			for(var itemType in shortcutObj) {
				if(!shortcutObj.hasOwnProperty(itemType))
					continue;
				itemTypeObj = shortcutObj[itemType];
				res += "\t\t" + this.fixPropName(itemType) + ": {\n";
				for(var propName in itemTypeObj) {
					if(!itemTypeObj.hasOwnProperty(propName))
						continue;
					propVal = itemTypeObj[propName];
					res += "\t\t\t" + this.fixPropName(propName) + ": " + this.objToSource(propVal) + ",\n";
				}
				res = this.delLastComma(res) + "\t\t},\n";
			}
			res = this.delLastComma(res) + "\t},\n";
		}
		res = this.delLastComma(res) + "};\n";

		res += "var handyClicksCustomTypes = {\n";
		this.sortObj(handyClicksCustomTypes);
		for(var itemType in handyClicksCustomTypes) {
			if(!handyClicksCustomTypes.hasOwnProperty(itemType) || itemType.indexOf("custom_") != 0)
				continue;
			itemTypeObj = handyClicksCustomTypes[itemType];
			if(typeof itemTypeObj != "object")
				continue;
			res += "\t" + this.fixPropName(itemType) + ": {\n";
			for(var propName in itemTypeObj) {
				if(!itemTypeObj.hasOwnProperty(propName) || propName.indexOf("_") == 0)
					continue;
				propVal = itemTypeObj[propName];
				res += "\t\t" + propName + ": " + this.objToSource(propVal) + ",\n";
			}
			res = this.delLastComma(res) + "\t},\n";
		}
		res = this.delLastComma(res) + "};";

		this.saveSettings(res);
		this.reloadSettings(reloadAll);
	},
	objToSource: function(obj) {
		return uneval(obj).replace(/^\(|\)$/g, "");
	},
	fixPropName: function(pName) {
		var o = {}; o[pName] = 0;
		return /'|"/.test(uneval(o)) ? '"' + pName + '"' : pName;
	},
	delLastComma: function(str) {
		return str.replace(/,\n$/, "\n");
	},
	sortObj: function(obj) {
		if(typeof obj != "object")
			return false;
		var tmp = [];
		var p;
		var res = {};
		for(p in obj)
			if(obj.hasOwnProperty(p)) {
				tmp.push(p);
				res[p] = obj[p];
				delete obj[p];
			}
		tmp.sort();
		for(var i = 0, len = tmp.length; i < len; i++) {
			p = tmp[i];
			obj[p] = res[p];
		}
		return true;
	},
	reloadSettings: function(reloadAll) {
		this._doNotReload = reloadAll ? false : true;
		this._isReloader = true;

		var wTypes = ["navigator:browser", "handyclicks:settings", "handyclicks:editor"];
		var wm = handyClicksWinUtils.wm;
		var ws, w;
		for(var i = 0, len = wTypes.length; i < len; i++) {
			ws = wm.getEnumerator(wTypes[i]);
			while(ws.hasMoreElements()) {
				w = ws.getNext();
				if("handyClicksPrefSvc" in w && !w.handyClicksPrefSvc._doNotReload) {
					w.handyClicksPrefSvc.loadSettings();
					w.handyClicksPrefSvc.notifyObservers();
				}
			}
		}

		this._doNotReload = false;
		this._isReloader = false;
	},
	moveFiles: function(mFile, nAdd, maxNum) {
		if(maxNum < 0)
			return null;
		if(!mFile.exists())
			return null;
		var fName = this.prefsFileName + nAdd;
		var pDir = this.prefsDir;
		var file;
		while(--maxNum >= 0) {
			file = this.getFile(fName + maxNum + ".js");
			if(file.exists())
				file.moveTo(pDir, fName + (maxNum + 1) + ".js");
		}
		mFile = mFile.clone();
		mFile.moveTo(pDir, fName + "0.js");
		return mFile.path;
	},
	saveSettings: function(str) {
		var pFile = this.prefsFile;
		if(str != this._savedStr)
			this.moveFiles(pFile, "-backup-", 4);
		this._savedStr = str;
		this.writeToFile(str, pFile);
	},
	writeToFile: function(str, file) {
		var stream = Components.classes["@mozilla.org/network/file-output-stream;1"]
			.createInstance(Components.interfaces.nsIFileOutputStream);
		stream.init(file, 0x02 | 0x08 | 0x20, 0644, 0);
		stream.write(str, str.length);
		stream.close();
	},
	isOkShortcut: function(s) {
		return this.okShortcut.test(s);
	},
	isOkFuncObj: function(fObj) {
		return typeof fObj == "object"
			&& typeof fObj.enabled == "boolean"
			&& typeof fObj.eventType == "string"
			&& typeof fObj.action == "string";
	}
};
handyClicksPrefSvc.loadSettings();