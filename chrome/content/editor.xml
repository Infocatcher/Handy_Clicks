<?xml version="1.0"?>
<bindings id="handyClicks-bindings" xmlns="http://www.mozilla.org/xbl">
	<binding id="codeEditor" extends="chrome://global/content/bindings/textbox.xml#textarea">
		<implementation>
			<field name="_editor">null</field>
			<property name="editor" readonly="true"> <!-- Thanks to Custom Buttons! -->
				<getter>
					if(!this._editor)
						this._editor = this.inputField
							.QueryInterface(Components.interfaces.nsIDOMNSEditableElement).editor;
					return this._editor;
				</getter>
			</property>
			<property name="newValue">
				<setter>
					this.value = val;
					this.editor.transactionManager.clear();
				</setter>
			</property>
			<method name="cmdInsert">
				<parameter name="text" />
				<body>
					this.editor
						.QueryInterface(Components.interfaces.nsIPlaintextEditor)
						.insertText(text);
				</body>
			</method>
			<method name="insertText">
				<parameter name="text" />
				<parameter name="startPos" />
				<parameter name="endPos" />
				<parameter name="selectFlag" />
				<parameter name="selStart" />
				<parameter name="selEnd" />
				<body>
				<![CDATA[
					var ifi = this.inputField;

					var sTop = ifi.scrollTop;
					var sHeight = ifi.scrollHeight;
					var sLeft = ifi.scrollLeft;
					// var sWidth = ifi.scrollWidth;

					ifi.selectionStart = startPos;
					ifi.selectionEnd = endPos;

					this.cmdInsert(text);

					switch(selectFlag) {
						case 0: // select all
							ifi.selectionStart = startPos;
							ifi.selectionEnd = startPos + text.length;
						break;
						case 1: // move cursor to start
							ifi.selectionStart = startPos;
							ifi.selectionEnd = startPos;
						break;
						case 2: // custom selection
							ifi.selectionStart = selStart;
							ifi.selectionEnd = selEnd;
					}
					ifi.scrollTop = sTop + (ifi.scrollHeight - sHeight);
					ifi.scrollLeft = sLeft; // + (ifi.scrollWidth - sWidth);
				]]>
				</body>
			</method>
			<method name="setIndent">
				<parameter name="indentChar" />
				<parameter name="removeFlag" />
				<body>
				<![CDATA[
					var val = this.value;
					var ifi = this.inputField;

					var startPos = ifi.selectionStart;
					var endPos = ifi.selectionEnd;

					var sel = val.substring(startPos, endPos);
					if(!/\n|\r/.test(sel)) {
						if(removeFlag)
							this.insertText(indentChar, startPos, endPos, 1);
						else
							this.cmdInsert(indentChar);
						return;
					}
					var startVal = val.substring(0, startPos);
					var endVal = val.substring(endPos, val.length);

					var selLen = endPos - startPos;
					var startLine = startVal.search(/(^|\n|\r)[^\n\r]*$/);
					startLine += RegExp.$1.length;
					var endLine = startVal.length + selLen + endVal.search(/\r|\n|$/);

					var block = val.substring(startLine, endLine);
					if(removeFlag)
						block = block.replace(new RegExp("^" + indentChar, "mg"), "");
					else
						block = block.replace(/^/mg, indentChar);
					this.insertText(block, startLine, endLine, 0);
				]]>
				</body>
			</method>
			<method name="toggleComments">
				<body>
				<![CDATA[
					var val = this.value;
					var ifi = this.inputField;

					var startPos = ifi.selectionStart;
					var endPos = ifi.selectionEnd;

					var sel = val.substring(startPos, endPos);
					var isMultiline = /\n|\r/.test(sel);

					var startVal = val.substring(0, startPos);
					var endVal = val.substring(endPos, val.length);

					var selLen = endPos - startPos;
					var startLine = startVal.search(/(^|\n|\r)[^\n\r]*$/);
					startLine += RegExp.$1.length;
					var endLine = startVal.length + selLen + endVal.search(/\r|\n|$/);

					var block = val.substring(startLine, endLine);
					var bLen0 = block.length;

					if(/^\/\//m.test(block))
						block = block.replace(/^\/\//mg, "");
					else
						block = block.replace(/^/mg, "//");
					var bLen1 = block.length;

					if(isMultiline)
						this.insertText(block, startLine, endLine, 0);
					else
						this.insertText(block, startLine, endLine, 2, startPos + bLen1 - bLen0, endPos + bLen1 - bLen0);
				]]>
				</body>
			</method>
		</implementation>
		<handlers>
			<handler event="keydown" phase="capturing">
				<![CDATA[
					var kCode = event.keyCode;
					if(kCode == event.DOM_VK_TAB && !event.ctrlKey && !event.altKey && !event.metaKey)
						this.setIndent("\t", event.shiftKey);
					else if(kCode == event.DOM_VK_SPACE && !event.ctrlKey && !event.altKey && !event.metaKey)
						this.setIndent(" ", event.shiftKey);
					else if(kCode == event.DOM_VK_A && event.ctrlKey && event.shiftKey && !event.altKey && !event.metaKey)
						this.toggleComments();
					else
						return;
					event.preventDefault();
				]]>
			</handler>
		</handlers>
	</binding>
</bindings>